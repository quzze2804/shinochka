from aiogram import Router, F
from aiogram.filters import Command, Text
from aiogram.types import Message
from keyboards import main_menu_keyboard
from datetime import datetime, time, timedelta
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

router = Router()

# –ü–∞–º—è—Ç—å –¥–ª—è –∑–∞–ø–∏—Å–µ–π: {user_id: [datetime, ...]}
user_appointments = {}

# –ó–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã: {datetime: user_id}
booked_slots = {}

def generate_slots(date):
    slots = []
    start = datetime.combine(date, time(8, 0))
    end = datetime.combine(date, time(17, 0))
    current = start
    while current <= end:
        slots.append(current)
        current += timedelta(minutes=30)
    return slots

def format_slot(dt):
    return dt.strftime("%Y-%m-%d %H:%M")

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ —É —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—ñ!\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ üëá",
        reply_markup=main_menu_keyboard()
    )

@router.message(Text("üõ† –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è"))
async def cmd_book(message: Message):
    today = datetime.now().date()
    dates = [today, today + timedelta(days=1), today + timedelta(days=2)]
    buttons = [f"{d.strftime('%Y-%m-%d')}" for d in dates]

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for b in buttons:
        keyboard.add(b)

    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å—É:", reply_markup=keyboard)
    await BookStates.waiting_for_date.set()

class BookStates(StatesGroup):
    waiting_for_date = State()
    waiting_for_slot = State()
    waiting_for_confirmation = State()

@router.message(BookStates.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    try:
        selected_date = datetime.strptime(message.text, "%Y-%m-%d").date()
    except:
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î")
        return

    slots = generate_slots(selected_date)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for slot in slots:
        if slot in booked_slots:
            keyboard.add(KeyboardButton(text=f"‚ùå {slot.strftime('%H:%M')}"))
        else:
            keyboard.add(KeyboardButton(text=slot.strftime('%H:%M')))

    await message.answer(f"–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–ª—è {selected_date}:", reply_markup=keyboard)
    await state.update_data(selected_date=selected_date)
    await BookStates.waiting_for_slot.set()

@router.message(BookStates.waiting_for_slot)
async def process_slot(message: Message, state: FSMContext):
    data = await state.get_data()
    selected_date = data.get("selected_date")
    time_text = message.text.replace("‚ùå ", "")

    try:
        selected_time = datetime.strptime(time_text, "%H:%M").time()
    except:
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    selected_datetime = datetime.combine(selected_date, selected_time)

    if selected_datetime in booked_slots:
        await message.answer("–¶–µ–π —á–∞—Å —É–∂–µ –∑–∞–π–Ω—è—Ç–∏–π, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π.")
        return

    await state.update_data(selected_datetime=selected_datetime)
    await message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ {format_slot(selected_datetime)}. –ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –∑–∞–ø–∏—Å (—Ç–∞–∫/–Ω—ñ)")
    await BookStates.waiting_for_confirmation.set()

@router.message(BookStates.waiting_for_confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    text = message.text.lower()
    data = await state.get_data()
    dt = data.get("selected_datetime")

    if text not in ("—Ç–∞–∫", "–Ω—ñ"):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ '—Ç–∞–∫' –∞–±–æ '–Ω—ñ'.")
        return

    if text == "–Ω—ñ":
        await message.answer("–ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ú–æ–∂–Ω–∞ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        await state.clear()
        return

    user_id = message.from_user.id
    user_appointments.setdefault(user_id, [])
    user_appointments[user_id].append(dt)
    booked_slots[dt] = user_id

    from main import bot
    admin_id = int((await bot.get("ADMIN_CHAT_ID")) or 7285220061)
    await bot.send_message(admin_id, f"–ù–æ–≤–∞ –±—Ä–æ–Ω—å: {message.from_user.full_name} –Ω–∞ {format_slot(dt)}")

    await message.answer(f"‚úÖ –ó–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –Ω–∞ {format_slot(dt)}!")
    await state.clear()

@router.message(Text("üìÖ –ú–æ—ó –∑–∞–ø–∏—Å–∏"))
async def show_my_appointments(message: Message):
    user_id = message.from_user.id
    appts = user_appointments.get(user_id, [])
    if not appts:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.")
        return

    text = "–í–∞—à—ñ –∑–∞–ø–∏—Å–∏:\n" + "\n".join(f"- {format_slot(dt)}" for dt in appts)
    await message.answer(text)

@router.message(Text("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å"))
async def cancel_appointment_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    appts = user_appointments.get(user_id, [])
    if not appts:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
        return

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for dt in appts:
        keyboard.add(KeyboardButton(format_slot(dt)))

    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:", reply_markup=keyboard)
    await state.set_state("cancelling")

@router.message()
async def handle_cancel_confirm(message: Message, state: FSMContext):
    if await state.get_state() != "cancelling":
        return

    user_id = message.from_user.id
    appts = user_appointments.get(user_id, [])
    text = message.text

    for dt in appts:
        if format_slot(dt) == text:
            appts.remove(dt)
            booked_slots.pop(dt, None)
            await message.answer(f"‚úÖ –ó–∞–ø–∏—Å –Ω–∞ {text} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            await state.clear()
            return

    await message.answer("–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@router.message(Text("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å"))
async def start_reschedule(message: Message, state: FSMContext):
    user_id = message.from_user.id
    appts = user_appointments.get(user_id, [])
    if not appts:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è.")
        return

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for dt in appts:
        keyboard.add(KeyboardButton(format_slot(dt)))

    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è:", reply_markup=keyboard)
    await state.set_state("rescheduling_select")

@router.message()
async def handle_reschedule_select(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != "rescheduling_select":
        return

    user_id = message.from_user.id
    appts = user_appointments.get(user_id, [])
    text = message.text

    for dt in appts:
        if format_slot(dt) == text:
            await state.update_data(reschedule_dt=dt)
            await message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è (–†–†–†–†-–ú–ú-–î–î):")
            await BookStates.waiting_for_date.set()
            await state.set_state("rescheduling_date")
            return

    await message.answer("–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@router.message()
async def handle_reschedule_date(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != "rescheduling_date":
        return

    try:
        selected_date = datetime.strptime(message.text, "%Y-%m-%d").date()
    except:
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î")
        return

    slots = generate_slots(selected_date)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for slot in slots:
        if slot in booked_slots:
            keyboard.add(KeyboardButton(text=f"‚ùå {slot.strftime('%H:%M')}"))
        else:
            keyboard.add(KeyboardButton(text=slot.strftime('%H:%M')))

    await message.answer(f"–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —á–∞—Å –¥–ª—è {selected_date}:", reply_markup=keyboard)
    await state.update_data(selected_date=selected_date)
    await state.set_state("rescheduling_slot")

@router.message()
async def handle_reschedule_slot(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != "rescheduling_slot":
        return

    data = await state.get_data()
    selected_date = data.get("selected_date")
    time_text = message.text.replace("‚ùå ", "")

    try:
        selected_time = datetime.strptime(time_text, "%H:%M").time()
    except:
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    selected_datetime = datetime.combine(selected_date, selected_time)

    if selected_datetime in booked_slots:
        await message.answer("–¶–µ–π —á–∞—Å –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π.")
        return

    data = await state.get_data()
    old_dt = data.get("reschedule_dt")
    user_id = message.from_user.id

    user_appointments[user_id].remove(old_dt)
    booked_slots.pop(old_dt, None)

    user_appointments.setdefault(user_id, []).append(selected_datetime)
    booked_slots[selected_datetime] = user_id

    from main import bot
    admin_id = int((await bot.get("ADMIN_CHAT_ID")) or 7285220061)
    await bot.send_message(admin_id, f"–ü–µ—Ä–µ–Ω–æ—Å –±—Ä–æ–Ω—ñ: {message.from_user.full_name} –∑ {format_slot(old_dt)} –Ω–∞ {format_slot(selected_datetime)}")

    await message.answer(f"‚úÖ –ó–∞–ø–∏—Å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ {format_slot(selected_datetime)}!")
    await state.clear()
